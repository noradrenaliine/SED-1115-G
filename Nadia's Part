from machine import Pin, PWM
servo = PWM(Pin(0))
servo.freq(50) 
            
def initialize_pico():
  
    # Initialize PWM controller
    pwm = machine.PWM(0)

    # Define pin assignments for servo motors
    SERVO_PIN_1 = 0
    SERVO_PIN_2 = 1

    # Configure GPIO pins for servo control
    pwm.init(freq=50, s1=SERVO_PIN_1, s2=SERVO_PIN_2)
    #Come back to frequency

    # Initialize dimensions of paper in mm
    shouldermax = 220
    elbowmax = 300

    # Set frequency for shoulder and elbow (assumed frequency is 50 Hz)
    shoulder = machine.PWM(Pin(0), freq=50)  
    elbow = machine.PWM(Pin(1), freq=50)    

    # Set initial angles to 0 (assuming 0 degrees is the default position)
    shoulder.duty_u16(angle_to_duty_cycle(0))
    elbow.duty_u16(angle_to_duty_cycle(0))

    # Return the PWM controller for later use
    return pwm, shoulder, elbow

        
# Function to Convert Angle to PWM Duty Cycle
def angles_to_duty_cycles(shoulderangle, elbowangle):
    
    MIN_ANGLE_DEGREES = 0  # Minimum servo angle in degrees
    MAX_ANGLE_DEGREES = 180  # Maximum servo angle in degrees
    MIN_DUTY_CYCLE = 1000  # Minimum PWM duty cycle value for the servo
    MAX_DUTY_CYCLE = 2000  # Maximum PWM duty cycle value for the servo
    
    #process shoulder servo angle to calculate duty cycle
    if 0<= shoulderangle <= 180:
            #Calculates the PWM output - linear interpolation formula
        shoulderduty_cycle = int((500 + (2000) * (shoulderangle / 180))*65535/20000)

    elif shoulderangle > 180:
        #angle is greater than 180 degrees, default PWM output of 8192 
        shoulderduty_cycle = 8192
    
    else:
        shoulderduty_cycle = 1638
    
    #process elbow servo angle to calculate duty cycle
    if 0<= elbowangle <= 180:
        elbowduty_cycle = int((500 + (2000) * (elbowangle / 180))*65535/20000)

    elif elbowangle > 180:
        elbowduty_cycle = 8192
    else:
        elbowduty_cycle = 1638
        
    print("Shoulder duty cycle is:",shoulderduty_cycle, "Elbow duty cycle is:", elbowduty_cycle)
        
    shoulder.duty_u16(shoulderduty_cycle)
    elbow.duty_u16(elbowduty_cycle)
    return shoulderduty_cycle, elbowduty_cycle

'''
Testing purposes: 
initialize_pico()
angles_to_duty_cycles (0, 90)
sleep (3)
angles_to_duty_cycles (90, 90)
sleep (3)
angles_to_duty_cycles (45, 90)
sleep (3)
angles_to_duty_cycles (45, 45)
'''

#Lifting and Lowering


def translate(angle:float)-> int:
   #The function checks if the input angle is between 0 and 180 degrees .
   if 0<= angle <= 180:
        #Calculates the PWM output using a linear interpolation formula
        #PWM is turned into 16-bit range (0 to 65535) and returned
        pwm_out = int((500 + (2000) * (angle / 180))*65535/20000)
    
    #angle is greater than 180 degrees,  default PWM output of 8192 
   elif angle > 180:
        pwm_out = 8192
    
    #angle is less than 0 degrees,  default PWM output of 1638
    else:
        pwm_out = 1638
    return pwm_out




def wrist (gcode_line, pen_switch_state):
    
    if 'PEN_UP' in gcode_line:
        # Perform actions to lift the pen
        print("Lifting the pen") 
        servo.duty_u16(translate(0))
                  
            
    elif 'PEN_DOWN' in gcode_line:
        print("Lowering the pen")
        servo.duty_u16(translate(30))
                
                  
    else:
        # Handle other G-Code commands or ignore if not relevant
        print("Ignoring other G-Code commands")
        
        
